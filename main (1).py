import telebot
from telebot import types
import sqlite3
import time
import datetime
import logging

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = '7784511499:AAFD3NxMnr_0Fql1JHhTNvDd_0_CwSXdR0U'
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = 6656908267
CHANNEL_USERNAME = "@adstoearnhere"

# Ad links dictionary
ad_links = {
    "Ad 1": "https://www.profitableratecpm.com/c18dzv85?key=7ef3008c70d644c24061e6af08800420/ad1",
    "Ad 2": "https://www.profitableratecpm.com/e7mycn4sya?key=5fc561a5cb39dce85552f7f01de5a0b7/ad2",
    "Ad 3": "https://www.profitableratecpm.com/n07dmhhu?key=34975be2aee853d77f2f5662c07778cb/ad3",
    "Ad 4": "https://www.profitableratecpm.com/ycp47wigbu?key=e6705cee625626ea2f625daf7656a32b/ad4",
    "Ad 5": "https://www.profitableratecpm.com/ajag6zq3?key=b119aafe0d045e004efcad2e525b7205/ad5",
    "Ad 6": "https://www.profitableratecpm.com/a5wieq0p?key=2aa3fc0d3d520192bfb60594009e75da/ad6",
    "Ad 7": "https://www.profitableratecpm.com/c18dzv85?key=7ef3008c70d644c24061e6af08800420/ad7",
    "Ad 8": "https://www.profitableratecpm.com/s3sdguahg?key=fadf94afc809023c999e0b775709bdd3/ad8",
    "Ad 9": "https://www.profitableratecpm.com/nin40jwue?key=3fae381386ad0da42e1346cb9fb5ccac/ad9",
    "Ad 10": "https://www.profitableratecpm.com/st1g62y0s?key=244c4ed87518d23f1208efd87838d12e/ad10",
}

# SQLite setup
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY, 
        balance INTEGER, 
        last_ad_time INTEGER, 
        referrals INTEGER, 
        referred_by INTEGER
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS withdraws (
        user_id INTEGER, 
        method TEXT, 
        number TEXT, 
        amount INTEGER, 
        status TEXT
    )
""")
conn.commit()

user_screenshot_waiting = {}

def is_joined(user_id):
    try:
        status = bot.get_chat_member(CHANNEL_USERNAME, user_id).status
        return status not in ['left', 'kicked']
    except:
        return False

def check_channel_join(func):
    def wrapper(message):
        if not is_joined(message.chat.id):
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржХрж░рзБржи", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
            bot.send_message(message.chat.id, "ЁЯЪл ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рж▓рзЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЕржмрж╢рзНржпржЗ ржЬрзЯрзЗржи рж╣рждрзЗ рж╣ржмрзЗред ржЬрзЯрзЗржи рж╣ржУрзЯрж╛рж░ ржкрж░ ржорзЗржирзБ ржмрж╛ржЯржи ржерзЗржХрзЗ ржЖржмрж╛рж░ Start ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиЁЯШК", reply_markup=markup)
            return
        return func(message)
    return wrapper

def add_user(user_id, referred_by=None):
    cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?)", (user_id, 0, 0, 0, referred_by))
        if referred_by:
            cursor.execute("UPDATE users SET referrals = referrals + 1, balance = balance + 50 WHERE id=?", (referred_by,))
        conn.commit()

@bot.message_handler(commands=['start'])
@check_channel_join
def start(message):
    user_id = message.chat.id
    args = message.text.split()
    referred_by = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    add_user(user_id, referred_by)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯСБя╕П Watch Ad", "ЁЯТ░ Balance")
    markup.add("ЁЯУд Withdraw", "ЁЯСе Referral")
    if user_id == ADMIN_ID:
        markup.add("ЁЯСитАНЁЯТ╗ Admin Panel", "ЁЯУв Broadcast")
    bot.send_message(user_id, "ЁЯСЛ Earn From Ads Bot ржП ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЫрзЗрж░ ржжрзЗржУрзЯрж╛ ржорзЗржирзБ ржерзЗржХрзЗ Watch Ad ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЖржЬржЗ ржЗржиржХрж╛ржо ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рзЗ ржжрж┐ржиЁЯШК", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "ЁЯСБя╕П Watch Ad")
@check_channel_join
def watch_ad(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for name in ad_links:
        markup.add(types.InlineKeyboardButton(name, callback_data=f"ad_{name}"))
    bot.send_message(message.chat.id, "ЁЯСЗ ржирж┐ржЪрзЗрж░ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ ржмрж┐ржЬрзНржЮрж╛ржкржи рж▓рж┐ржВржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("ad_"))
def handle_ad(call):
    ad_name = call.data.split("_", 1)[1]
    user_id = call.message.chat.id
    link = ad_links[ad_name]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("ЁЯФЧ рж▓рж┐ржВржХрзЗ ржпрж╛ржи", url=link))
    bot.send_message(user_id, f"тЬЕ {ad_name} рж▓рж┐ржВржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ржПржмржВ рзмрзж рж╕рзЗржХрзЗржирзНржб ржирж┐рзЯрзЗ ржпрж╛ржУрзЯрж╛ рж▓рж┐ржВржХрзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред рждрж╛рж░ржкрж░ рзмрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржХржиржлрж╛рж░рзНржо ржХрж░рзБржиред", reply_markup=markup)
    time.sleep(65)
    confirm = types.InlineKeyboardMarkup()
    confirm.add(types.InlineKeyboardButton("тЬЕ рж╣рзНржпрж╛ржБ ржЖржорж┐ рж▓рж┐ржВржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗржЫрж┐", callback_data=f"confirm_{ad_name}"))
    bot.send_message(user_id, "ржЖржкржирж┐ ржХрзА рж▓рж┐ржВржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗржЫрзЗржи?", reply_markup=confirm)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_ad(call):
    user_id = call.message.chat.id
    cursor.execute("UPDATE users SET balance = balance + 10 WHERE id=?", (user_id,))
    conn.commit()
    bot.send_message(user_id, "ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ ржПржбрж╕ ржжрзЗржЦрж╛ рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗтЬЕредржЖржкржирж┐ рззрзж ржХрзЯрзЗржи ржкрзЗрзЯрзЗржЫрзЗржиЁЯкЩред ржЖрж░рзЛ ржПржбрж╕ ржжрзЗржЦрждрзЗ ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржмрж╛ржЯржи ржерзЗржХрзЗ Watch AdЁЯОе ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиЁЯШКред")

@bot.message_handler(func=lambda m: m.text == "ЁЯТ░ Balance")
@check_channel_join
def balance(message):
    cursor.execute("SELECT balance FROM users WHERE id=?", (message.chat.id,))
    bal = cursor.fetchone()[0]
    bot.send_message(message.chat.id, f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {bal} ржХрзЯрзЗржи")

@bot.message_handler(func=lambda m: m.text == "ЁЯСе Referral")
@check_channel_join
def referral(message):
    cursor.execute("SELECT referrals FROM users WHERE id=?", (message.chat.id,))
    total = cursor.fetchone()[0]
    link = f"https://t.me/{bot.get_me().username}?start={message.chat.id}"
    bot.send_message(message.chat.id, f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ: {link}\nЁЯСе ржорзЛржЯ рж░рзЗржлрж╛рж░: {total}")

@bot.message_handler(func=lambda m: m.text == "ЁЯУд Withdraw")
@check_channel_join
def withdraw(message):
    cursor.execute("SELECT balance, referrals FROM users WHERE id=?", (message.chat.id,))
    bal, refs = cursor.fetchone()
    if bal < 1000:
        return bot.send_message(message.chat.id, "тЭМ ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ рззрзжрзжрзж ржХрзЯрзЗржи рж▓рж╛ржЧржмрзЗред")
    if refs < 10:
        return bot.send_message(message.chat.id, "тЭМ ржЕржирзНрждржд рззрзж рж░рзЗржлрж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("bKash", callback_data="pay_bkash"))
    markup.add(types.InlineKeyboardButton("Nagad", callback_data="pay_nagad"))
    bot.send_message(message.chat.id, "ЁЯУ▒ ржкрзЗржорзЗржирзНржЯ ржорзЗржержб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def process_payment_method(call):
    method = call.data.split("_")[1]
    msg = bot.send_message(call.message.chat.id, f"ЁЯУЮ {method} ржиржорзНржмрж░ ржжрж┐ржи (рззрзз ржбрж┐ржЬрж┐ржЯ):")
    bot.register_next_step_handler(msg, lambda m: ask_amount(m, method))

def ask_amount(message, method):
    number = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("рзлрзжрз│ (1000 Coins)", callback_data=f"withdraw_{method}_{number}_50"))
    bot.send_message(message.chat.id, "ржкрж░рж┐ржорж╛ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("withdraw_"))
def confirm_withdraw(call):
    _, method, number, taka = call.data.split("_")
    user_id = call.message.chat.id
    coins = int(taka) * 20
    cursor.execute("SELECT balance FROM users WHERE id=?", (user_id,))
    if cursor.fetchone()[0] < coins:
        return bot.send_message(user_id, "тЭМ ржпржерзЗрж╖рзНржЯ ржХрзЯрзЗржи ржирзЗржЗред")
    cursor.execute("UPDATE users SET balance = balance - ? WHERE id=?", (coins, user_id))
    cursor.execute("INSERT INTO withdraws VALUES (?, ?, ?, ?, 'Pending')", (user_id, method, number, int(taka)))
    conn.commit()
    bot.send_message(user_id, f"тЬЕ {taka}рз│ ржЕржирзБрж░рзЛржз ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("тЬЕ Payment Done", callback_data=f"done_{user_id}"),
        types.InlineKeyboardButton("тЭМ Payment Rejected", callback_data=f"reject_{user_id}")
    )
    bot.send_message(ADMIN_ID, f"ЁЯФФ ржЗржЙржЬрж╛рж░ {user_id} {taka}рз│ ржЪрж╛ржЪрзНржЫрзЗ:\nMethod: {method}\nNumber: {number}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("done_"))
def payment_done(call):
    user_id = int(call.data.split("_")[1])
    bot.send_message(user_id, "тЬЕ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ!\nЁЯУ╕ ржкрзЗржорзЗржирзНржЯ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржУ рж░рж┐ржнрж┐ржЙ ржжрж┐ржи:")
    user_screenshot_waiting[user_id] = True

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def reject_withdraw(call):
    user_id = int(call.data.split("_")[1])
    msg = bot.send_message(ADMIN_ID, "тЭЧ рж░рж┐ржЬрзЗржХрзНржЯрзЗрж░ ржХрж╛рж░ржг рж▓рж┐ржЦрзБржи:")
    bot.register_next_step_handler(msg, lambda m: bot.send_message(user_id, f"тЭМ ржкрзЗржорзЗржирзНржЯ ржмрж╛рждрж┐рж▓ред\nржХрж╛рж░ржг: {m.text}"))

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if user_screenshot_waiting.get(message.chat.id):
        caption = message.caption or "No caption"
        bot.send_photo(CHANNEL_USERNAME, message.photo[-1].file_id, caption=f"ЁЯУ╖ ржЗржЙржЬрж╛рж░ {message.chat.id}: {caption}")
        bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ рж░рж┐ржнрж┐ржЙ ржУ ржЫржмрж┐ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржзржирзНржпржмрж╛ржж!")
        user_screenshot_waiting.pop(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "ЁЯСитАНЁЯТ╗ Admin Panel")
def admin_panel(message):
    if message.chat.id != ADMIN_ID:
        return
    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]
    cursor.execute("SELECT * FROM users")
    all_users = cursor.fetchall()
    msg = f"ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: {total}\n\n"
    for user in all_users:
        uid, _, _, refs, ref_by = user
        msg += f"ЁЯСд {uid} | рж░рзЗржлрж╛рж░: {refs} | рж░рзЗржлрж╛рж░рзНржб ржмрж╛ржЗ: {ref_by}\n"
    bot.send_message(ADMIN_ID, msg)

@bot.message_handler(func=lambda m: m.text == "ЁЯУв Broadcast")
def broadcast_prompt(message):
    if message.chat.id != ADMIN_ID:
        return
    msg = bot.send_message(message.chat.id, "тЬЙя╕П ржмрж╛рж░рзНрждрж╛ рж▓рж┐ржЦрзБржи:")
    bot.register_next_step_handler(msg, broadcast_send)

def broadcast_send(message):
    cursor.execute("SELECT id FROM users")
    for (uid,) in cursor.fetchall():
        try:
            bot.send_message(uid, f"ЁЯУв ржмрж┐ржЬрзНржЮржкрзНрждрж┐/ржирзЛржЯрж┐рж╢/ржШрзЛрж╖ржгрж╛: {message.text}")
        except:
            continue
    bot.send_message(ADMIN_ID, "тЬЕ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")

# тЬЕ Render-ready infinite polling loop
while True:
    try:
        logger.info("ржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
        bot.polling(none_stop=True, interval=0, timeout=10)
    except Exception as e:
        logger.error(f"рждрзНрж░рзБржЯрж┐! ржмржЯ ржмржирзНржз рж╣рзЯрзЗржЫрзЗ: {e}")
        logger.info("рзжрзл рж╕рзЗржХрзЗржирзНржб ржкрж░ ржЖржмрж╛рж░ ржЪрж╛рж▓рзБ рж╣ржмрзЗ...")
        time.sleep(5)